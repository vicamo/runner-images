name: Build Runner Images
run-name: ${{ format('{0} - {1}', github.event.action, github.event.client_payload.pr_title) }}

on:
  repository_dispatch:
    types:
      - trigger-ubuntu2204-build
      - trigger-ubuntu2404-build
      - trigger-windows2019-build
      - trigger-windows2022-build
      - trigger-windows2025-build

defaults:
  run:
    shell: pwsh

jobs:
  docker-build:
    runs-on: ${{ contains(github.event.action, 'ubuntu') && 'ubuntu-latest' || 'windows-2025' }}

    steps:
      - run: |
          $ImageType = ("${{ github.event.action }}" -split "-")[1]
          "IMAGE_TYPE=$ImageType" | Out-File -Append -FilePath $env:GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.custom_repo }}
          ref: ${{ github.event.client_payload.custom_repo_commit_hash }}

      - name: Disk space before pruning
        run: |
          echo "::group::Disk space before pruning"
          switch ("${{ runner.os }}") {
            "Linux" {
              df -h
            }
            "Windows" {
              Get-PSDrive -PSProvider FileSystem
            }
          }
          echo "::endgroup::"

      - name: Prune software (APT)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "::group::Installed APT packages"
          dpkg -l
          echo "::endgroup::"

          echo "::group::Remove APT packages"
          sudo apt-mark minimize-manual --yes
          packages=(
            ant
            ant-optional
            apache2*
            aspnetcore-*
            azure-cli
            clang-*
            dotnet-*
            google-chrome-stable
            libmono-*
            lld-*
            lldb-*
            libmono*
            libnginx-*
            llvm-*
            microsoft-edge-stable
            mongodb-*
            mono-*
            mysql-*
            nginx
            php*
            podman
            postgresql-*
            r-*
            ruby*
            temurin-*
            walinuxagent
          )
          sudo apt-get remove --purge -y ${packages[@]}
          echo "::endgroup::"

          echo "::group::Remaining APT packages"
          dpkg -l
          echo "::endgroup::"

          echo "::group::Disk space after removing apt packages"
          df -h
          echo "::endgroup::"

          echo "::group::Remove directories/files"
          paths=(
            /etc/skel/.cargo
            /etc/skel/.composer
            /etc/skel/.dotnet
            /etc/skel/.nvm
            /etc/skel/.rustup
            /opt/actionarchivecache
            /opt/az
            /opt/hostedtoolcache
            /opt/pipx
            /opt/pipx_bin
            /opt/runner
            /opt/runner-cache
            /usr/local/.ghcup
            /usr/local/aws-cli
            /usr/local/aws-sam-cli
            /usr/local/bin/aliyun
            /usr/local/bin/azcopy*
            /usr/local/bin/bicep
            /usr/local/bin/ccmake
            /usr/local/bin/cmake
            /usr/local/bin/cmake-gui
            /usr/local/bin/cpack
            /usr/local/bin/ctest
            /usr/local/bin/helm
            /usr/local/bin/kind
            /usr/local/bin/kustomize
            /usr/local/bin/minikube
            /usr/local/bin/oc
            /usr/local/bin/pulumi*
            /usr/local/bin/terraform
            /usr/local/julia*
            /usr/local/lib/android
            /usr/local/lib/node_modules
            /usr/local/share/chromedriver-linux64
            /usr/local/share/chromium
            /usr/local/share/cmake-*
            /usr/local/share/edge_driver
            /usr/local/share/gecko_driver
            /usr/local/share/powershell
            /usr/local/share/vcpkg
            /usr/local/sqlpackage
            /usr/share/az_*
            /usr/share/gradle-*
            /usr/share/kotlinc
            /usr/share/miniconda
            /usr/share/sbt
            /usr/share/swift
          )
          sudo rm -rf ${paths[@]}
          echo "::endgroup::"

      - name: Disk space after pruning
        run: |
          echo "::group::Disk space after pruning"
          switch ("${{ runner.os }}") {
            "Linux" {
              df -h
            }
            "Windows" {
              Get-PSDrive -PSProvider FileSystem
            }
          }
          echo "::endgroup::"

      - name: Prune docker images
        run: |
          echo "::group::docker image prune"
          docker image prune --all --force
          echo "::endgroup::"

          echo "::group::Disk space after pruning docker images"
          switch ("${{ runner.os }}") {
            "Linux" {
              df -h
            }
            "Windows" {
              Get-PSDrive -PSProvider FileSystem
            }
          }
          echo "::endgroup::"

      - name: Remove swap file
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "::group::Swap info"
          swapon -s
          echo "::endgroup::"

          sudo swapoff -a
          sudo rm -f /mnt/swapfile

          echo "::group::Disk space after removing swap file"
          df -h
          echo "::endgroup::"

      - name: Create LVM volume
        if: runner.os == 'Linux'
        shell: bash
        env:
          ROOT_RESERVE_MB: 512
          ROOT_LOOP_IMAGE_PATH: /loop.img
          MNT_RESERVE_MB: 128
          MNT_LOOP_IMAGE_PATH: /mnt/loop.img
        run: |
          echo "::group::Create LVM volume"
          ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          ROOT_LVM_SIZE_KB=$(($ROOT_FREE_KB-$ROOT_RESERVE_MB))
          ROOT_LVM_SIZE_BYTES=$(($ROOT_LVM_SIZE_KB*1024))

          sudo touch "${ROOT_LOOP_IMAGE_PATH}"
          sudo fallocate -z -l "${ROOT_LVM_SIZE_BYTES}" "${ROOT_LOOP_IMAGE_PATH}"
          export ROOT_LOOP_DEV=$(sudo losetup --find --show "${ROOT_LOOP_IMAGE_PATH}")
          sudo pvcreate -f "${ROOT_LOOP_DEV}"

          MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          MNT_LVM_SIZE_KB=$(($MNT_FREE_KB-$MNT_RESERVE_MB))
          MNT_LVM_SIZE_BYTES=$(($MNT_LVM_SIZE_KB*1024))

          sudo touch "${MNT_LOOP_IMAGE_PATH}"
          sudo fallocate -z -l "${MNT_LVM_SIZE_BYTES}" "${MNT_LOOP_IMAGE_PATH}"
          export MNT_LOOP_DEV=$(sudo losetup --find --show "${MNT_LOOP_IMAGE_PATH}")
          sudo pvcreate -f "${MNT_LOOP_DEV}"

          VG_NAME=vgmerged
          sudo vgcreate "${VG_NAME}" "${MNT_LOOP_DEV}" "${ROOT_LOOP_DEV}"

          LV_NAME=lvmerged
          sudo lvcreate -l 100%FREE -n "${LV_NAME}" "${VG_NAME}"

          MERGED_DEV="/dev/mapper/${VG_NAME}-${LV_NAME}"
          sudo mkfs.ext4 -m0 "${MERGED_DEV}"
          echo "::endgroup::"

          MERGED_DIR=/merged
          sudo mkdir "${MERGED_DIR}"
          sudo mount "${MERGED_DEV}" "${MERGED_DIR}"

          echo "::group::Disk space after merging disks"
          df -h
          echo "::endgroup::"

      - name: Setup `packer`
        uses: hashicorp/setup-packer@v3.1.0
        with:
          # See https://releases.hashicorp.com/packer/
          version: '1.13.1'

      - name: Pre-configure Packer
        id: preconfig
        run: |
          switch -Wildcard ("${{ github.event.action }}") {
            "ubuntu*" {
              $imageOs = "ubuntu"
            }
            "*windows*" {
              $imageOs = "windows"
            }
          }

          echo "::group::Pre-configure Packer"
          & {
            echo "image_os=${imageOs}";
          } | tee -a "$env:GITHUB_OUTPUT"
          echo "::endgroup::"

      - name: Build Image
        run: |
          Import-Module .\helpers\GenerateResourcesAndImage.ps1

          echo "::group::Generate Image"
          GenerateResourcesAndImage -ImageType "${env:IMAGE_TYPE}"
          echo "::endgroup::"

          $readme = Join-Path "images" "${{ steps.preconfig.outputs.image_os }}" "${env:IMAGE_TYPE}-Readme.md"
          Get-Content -Path "$readme" | Out-File -Append -FilePath "$env:GITHUB_STEP_SUMMARY"

      - name: Upload generated reports
        uses: actions/upload-artifact@v4
        with:
          name: reports-${env:IMAGE_TYPE}
          path: |
            images/${{ steps.preconfig.outputs.image_os }}/${env:IMAGE_TYPE}-Readme.md
            images/${{ steps.preconfig.outputs.image_os }}/software-report.json
